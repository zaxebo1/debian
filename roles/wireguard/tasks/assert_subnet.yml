---
- name: Register all interfaces of the target host
  set_fact:
    wg_existing_ifaces: "{{ hostvars[inventory_hostname]\
                          ['ansible_%s' | format(item)]['ipv4'] }}"
  loop: '{{ ansible_interfaces }}'
  when: hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4'] is defined
  register: wg_existing_ifaces_parsed

- name: Parse the results
  set_fact:
    wg_existing_ifaces_mini: "{{ wg_existing_ifaces_parsed.results\
                              | json_query( '[*].ansible_facts.wg_existing_ifaces' )}}"

- name: Construct address/netmask pairs in CIDR format
  set_fact:
    wg_addr_plus_netmask: "{{ wg_addr_plus_netmask\
                            + [item['address'] + '/' + item['netmask']] }}"
    wg_addr_individual: "{{ wg_addr_individual\
                          + [item['address'] | string] }}"
  with_items: '{{ wg_existing_ifaces_mini }}'
  vars:
    wg_addr_plus_netmask: []
    wg_addr_individual: []

- name: Register address/netmask pairs in CIDR format
  set_fact:
    wg_addr_incl_netmask_ready: "{{ wg_addr_incl_netmask_ready\
                                  + [item | ipaddr('network/prefix')] }}"
  with_items: '{{ wg_addr_plus_netmask }}'
  vars:
    wg_addr_incl_netmask_ready: []

- name: Register subnets on target that overlap with the `wg_server_subnet`
  set_fact:
    wg_overlap_networks: "{{ wg_overlap_networks + \
                  [hostvars[inventory_hostname]\
                  ['ansible_%s' | format(item)]\
                  ['ipv4']['network']\
                  | ipaddr(wg_server_subnet)\
                  | string] }}"
  loop: '{{ ansible_interfaces }}'
  when: hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4'] is defined
  vars:
    - wg_overlap_networks: []

- name: Remove invalid network and addresses
  set_fact:
    wg_overlap_networks: "{{ wg_overlap_networks\
                          | difference(wg_null) }}"
  vars:
    - wg_null: ['null', None]

- name: Separate addresses
  set_fact:
    wg_addresses: "{{ lookup('flattened', wg_overlap_networks\
                    | zip_longest(wg_addr_incl_netmask_ready,wg_addr_individual)\
                    | list) | ipaddr('address') | unique\
                    | difference(['127.0.0.1'])}}"

- name: Filter addresses
  set_fact:
    wg_addresses_filtered: '{{ wg_addresses_filtered + [item] }}'
  with_items: '{{ wg_addresses }}'
  when: item | ipaddr(wg_server_subnet) | ipaddr('bool')
  vars:
    wg_addresses_filtered: []

- name: Filter and separate networks
  set_fact:
    wg_networks: "{{ lookup('flattened', wg_overlap_networks\
                  | zip_longest(wg_addr_incl_netmask_ready)\
                  | list) | ipaddr('net') | unique }}"
  when: wg_addresses_filtered is defined

- name: Create dictionary to correlate all the findings about network
  set_fact:
    wg_combodict: '{{ wg_combodict | combine({item:wg_addresses_filtered}) }}'
  with_items: '{{ wg_networks }}'
  when: wg_networks is defined and wg_addresses_filtered is defined
  vars:
    wg_combodict: {}

- name: Correlate findings about network and register overlapping IPs
  set_fact:
    wg_ips_to_correlate: "{{ wg_ips_to_correlate\
                          + [item.1 | ipaddr(item.0.key)] }}"
  when:
      - wg_combodict is defined
      - item.1 | ipaddr(item.0.key) | ipaddr('bool')
  loop: '{{ wg_combodict | dict2items | subelements("value") }}'
  vars:
    wg_ips_to_correlate: []

- name: Install necessary Python modules
  apt:
    name:
      - python3-netifaces
      - python3-netaddr
    state: present

- name: Find which interfaces are affected
  findif:
    address: '{{ item }}'
  with_items: '{{ wg_ips_to_correlate }}'
  when: wg_ips_to_correlate is defined
  changed_when: false
  register: wg_overlap_ifaces

- name: Register affected interfaces
  set_fact:
    wg_affected_ifaces: '{{ wg_affected_ifaces + [item.interface | string] }}'
    wg_affected_addresses: '{{ wg_affected_addresses + [item.item] }}'
  with_items: '{{ wg_overlap_ifaces.results }}'
  when:
    - wg_overlap_ifaces.results is defined
    - item.interface != None
  vars:
    wg_affected_ifaces: []
    wg_affected_addresses: []

- name: Assert there is only one affected interface and it has â‰¥1 IPs
  assert:
    that:
      - wg_affected_ifaces | length == 1
      - wg_affected_addresses | length >= wg_affected_ifaces | length
    fail_msg: "There is more than one interface with overlapping subnet.\n\
                It is best to check {{ wg_affected_ifaces }} manually.\n\
                Affected IPs: {{ wg_affected_addresses }}"
    success_msg: "One overlapping interface detected:\n\
                  '{{ wg_affected_ifaces[0] }}', with an address of \
                  {{ wg_affected_addresses[0] }}"
  register: wg_affected_single
  when:
    - wg_affected_ifaces is defined
    - wg_affected_addresses is defined

- name: Extract IP from a Wireguard config we intend to replace
  shell:
    cmd: 'grep Address /etc/wireguard/{{ wg_affected_ifaces[0] }}.conf | cut -d" " -f3 | xargs'
  register: wg_existing_config_ip
  changed_when: false
  when:
    - wg_affected_ifaces is defined

- name: Ensure that subnet from Wireguard config overlaps with the detected IP
  assert:
    that:
      - wg_affected_addresses[0] | ipaddr(wg_existing_config_ip.stdout | string)
    fail_msg: "Subnet '{{ wg_existing_config_ip.stdout }}' found in \
                the config file of the interface '{{ wg_iface }}' does not overlap with \
                the active address '{{ wg_affected_addresses[0] }}' detected above. \
                Please investigate before continuing.\nEnsure you are not intruding \
                into the space of non-Wireguard interface."
    success_msg: "Subnet '{{ wg_existing_config_ip.stdout }}' found in \
                the Wireguard config includes '{{ wg_affected_addresses[0] }}'.\n\
                Proceeding with overwriting it."
  when:
    - wg_overwrite
    - wg_affected_ifaces is defined
    - wg_affected_addresses is defined

- name: Ensure that found interface is managed by Wireguard _now_
  shell:
    cmd: 'wg show {{ wg_affected_ifaces[0] }}'
  register: wg_affected_shellcheck
  failed_when: wg_affected_shellcheck.rc > 0
  when:
    - wg_overwrite
    - wg_affected_ifaces is defined
    - wg_affected_addresses is defined

- name: Assert that we can destroy the interface
  assert:
    that:
      - wg_overwrite
      - wg_affected_ifaces[0] == wg_iface
    success_msg: "Requested subnet of {{ wg_server_subnet }} overlaps with \
                  the {{ wg_affected_addresses[0] }}.\nOverwriting interface \
                  '{{ wg_affected_ifaces[0] }}' on the target host."
    fail_msg: "Requested subnet of {{ wg_server_subnet }} overlaps with \
                the {{ wg_affected_addresses[0] }}.\nRequested interface \
                '{{ wg_iface }}' would overlap with '{{ wg_affected_ifaces[0] }}' \
                on the target host.\n\
                To proceed, `wg_iface` must be set to \
                '{{ wg_affected_ifaces[0] }}' and 'wg_overwrite' to 'True'."
  when: wg_affected_ifaces[0] is defined and wg_affected_ifaces[0] != None
