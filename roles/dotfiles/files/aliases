#
# Functions -----------------------------------------------------------------------------
#

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
bright_yellow=`tput setaf 11`
blue=`tput setaf 4`
pink=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 15`
clr_reset=`tput sgr0`

# Grep for a process without showing `grep` command itself
psgrep() { grc ps -aexo "uname,args" | grep -v grep | grep "$@" -i --color=auto; }

# Open IPv4 ports
openports() { sudo lsof -Pni4 | awk '{print $1,$3,$8,$9}' | column -t; }

# Make directory and cd into it
mcd() { mkdir "$1" && cd "$1" || exit; }

# Find files not owned by current user in pwd
notusr() { find . \! -user "$@" -print; }

# Create tmux-split and close it after $editor is terminated
if { [ -n "$TMUX" ]; }; then peek() { tmux split-window -p 40 "$EDITOR" "$@" || exit; }; fi

# Compress file or directory
rmx() { if [ $# -eq 1 ]; then rar a -m5 -ma5 -s -md64m "${1%/}.rar" "${1%/}"; fi }
tmx() { if [ $# -eq 1 ]; then tar cv "${1%/}" | xz -9 > "${1%/}.tar.xz" ; fi }

# Whois abuse contact
wabuse() { if [ $# -eq 1 ]; then whois ${1%} | grep -i abuse; fi }

# Host SSH keys
hostkeys() { for i in /etc/ssh/*key*; do ssh-keygen -l -f $i 2> /dev/null; done | sort -u; }

# Lazy git
lzg() { git add . && git commit -a -m "$@" && git push; }

# apt search | grep wrapper
aptgrep() { if [ $# -eq 2 ]; then apt search ${1%} 2> /dev/null | grep ${2%}; else echo "aptgrep SEARCH GREP"; fi }

# Time marker
marker() { printf "${cyan}%$(( ${COLUMNS} - 12 ))s─(${bright_yellow}%(%H:%M:%S)T${cyan})─${clr_reset}" | sed 's/ /─/g'; }

# Systemd
slog() { sudo grc journalctl --unit "$1"; }
sstat() { sudo systemctl status "$1"; }

# Last N modified files
flast() { if [ $# -eq 1 ] && [ $1 -eq $1 ]; then find . -xdev -type f -not -path "*/.git/*" -printf "%T@ %Tc %p\n" | sort -n -r 2> /dev/null | head -${1%} | cut -d" " -f2-; fi }

# Single-pass empty directories removal
emptydirs() {
  local folders_empty=$(find . -type d -empty -print | sort --dictionary-order)
  local folders_count=$(echo -e "$folders_empty" | wc -l)
  if [ $folders_count -gt 1 ]; then
    echo -e "\n$folders_empty"
    if [[ $1 == '--force' ]]; then
      echo -e "\nRemoving $folders_count of empty folders\n"
      for dir in $folders_empty; do
        rmdir $dir
      done
      return
    else
      echo "" && read -p "Delete $folders_count empty folders (y/n)? " choice
      case "$choice" in
        y|Y )
          for dir in $folders_empty; do
            rmdir $dir
          done ;;
        * )   :;;
      esac
    fi
  else
    return 1
  fi
}

wtf() {
  host  "$1"
  whois "$1" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//' | grep -i "NetName\|Inetnum\|NetRange\|Creation\|Expiry"
}

chs() { # chrome-suspend
  pkill -STOP -f "^chrome-sandbox$"
  pkill -STOP -f "^chromium$"
  pkill -STOP -f "^chrome$"
}

chr() { # chrome-suspend
  pkill -CONT -f "^chrome$"
  pkill -CONT -f "^chromium$"
  pkill -CONT -f "^chrome-sandbox$"
}

ffs() { # firefox-suspend
  pkill -STOP -f "(^|/)+iceweasel( |$)+"
  pkill -STOP -f "(^|/)+firefox(-bin)*( |$)+"
  pkill -STOP -f "(^|/)+firefox-esr( |$)+"
  pkill -STOP -f "x-www-browser"
  pkill -STOP -f "(^|/)+plugin-container( |$)+"
}

ffr() { # firefox-resume
  pkill -CONT -f "(^|/)+iceweasel( |$)+"
  pkill -CONT -f "(^|/)+firefox(-bin)*( |$)+"
  pkill -CONT -f "(^|/)+firefox-esr( |$)+"
  pkill -CONT -f "x-www-browser"
  pkill -CONT -f "(^|/)+plugin-container( |$)+"
}

# imv-wayland with monitor-mode supression
im() {
  if [ $# -eq 1 ]; then
    ( set +m && imv-wayland ${1%} &> /dev/null & )
  else
    ( set +m && imv-wayland . &> /dev/null & )
  fi
  set -m
}

# vifm wrapper to exit into an active directory
vicd() {
  local dst="$(command vifm --choose-dir -)"
  if [ -z "$dst" ]; then
    echo 'Cancelled'
    return 1
  fi
  cd "$dst"
}

# Reset the term
bind -x '"\C-l"':"reset && exec bash"

# Quick thesaurus
function _dict_lookup {
  if [ -f $HOME/.local/share/wordlist ]; then
    # From WordNet's .sense:
    #   :%s/\v(^\w.*)\%.*/\1/g
    #   :%sort u
    _dict_file="$HOME/.local/share/wordlist"
  else
    _dict_file="/usr/share/dict/words"
  fi
  cat $_dict_file | fzf --preview 'wn {} -over | fold -w $COLUMNS -s' --preview-window=up:60%
}
function d {
  if [ $# -eq 0 ]; then
    wn `_dict_lookup` -over | fold -w $COLUMNS -s
  else
    wn $1 -over | fold -w $COLUMNS -s
  fi
}

# FZF ----------------------------------------------------------------------------------

FCLR="--color=dark,fg:#707880,bg:#000000,hl:#b5bd68,fg+:#c5c8c6,bg+:#000000,hl+:#d7ffaf,info:#707880,gutter:#000000,border:#373b41,prompt:#707880,pointer:#de935f,marker:#de935f,spinner:#8abeb7,header:#707880"
FZF_CTRL_F_OPTS="--preview-window='right:hidden' --margin=0,1,0,0 --preview 'bat --color=always --style=plain {}' --inline-info --bind=ctrl-w:toggle-preview --bind=ctrl-x:toggle-sort --exact"


# CTRL+F or `fa` --find all
fzf-file-widget() {
  local selected="$(__fzf_select__)"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
}

fa() { fzf-file-widget; }

# --- Bench ---
# find: ~2s real, 120% CPU on X13
# fd: ~0.53s real, 1000% CPU on X13. ~1.5s with -j 1
#
# find -L . -mindepth 1 \( -path '*timeshift/*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \) -prune     -o -type f -print -o -type d -print -o -type l -print 2> /dev/null | cut -b3-
# fd -uu --exclude '/timeshift/*' --one-file-system -t f -t d -t l &> /dev/null

__fzf_select__() {
  eval "$FZF_DEFAULT_COMMAND" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_F_OPTS $FCLR" $(__fzfcmd) -m "$@" | while read -r item; do
    printf '%q ' "$item"
  done
  echo
}

__fzfcmd() {
  echo "fzf"
}

bind -m emacs-standard '"\er": redraw-current-line'
bind -m emacs-standard -x '"\C-f": fzf-file-widget'
bind -m vi-command -x '"\C-f": fzf-file-widget'
bind -m vi-insert -x '"\C-f": fzf-file-widget'

# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fdfind --hidden --follow . "$1"
}

# Use fdfind to generate the list for directory completion
_fzf_compgen_dir() {
  fdfind --type d . "$1"
}

# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift
  case "$command" in
    cd)           fzf "$@" --exact --margin=0,1,0,0 --preview 'tree -C {} | head -200' ;;
    export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
    ssh)          fzf "$@" --preview 'dig +short {}' ;;
    *)            fzf "$@" ;;
  esac
}

# fe - edit file, optional cd into $1
fe() {
  local IFS=$'\n'
  local cur_pwd=$PWD
  local dst_pwd="."
  local query=""
  if [[ -d $1 ]]
    then dst_pwd=$1
      if [[ "$#" -gt 1 ]]; then query="${@:2}"; fi
  else query="$@";
  fi
  if [[ -d $1 ]]; then cd $1; else query="$@"; fi
  local f_files=($(fzf --query=$query +m --reverse \
                --preview-window='right:nohidden' \
                --preview 'bat --color=always --style=plain {}' \
                --inline-info --bind=ctrl-w:toggle-preview \
                --bind=ctrl-x:toggle-sort --exact $FCLR))
  [[ -n "$f_files" ]] && ${EDITOR:-vim} "${f_files[@]}"
  cd $cur_pwd
}

# fcf - cd into directory containing a file
fcf() {
  local f_file
  local f_dir
  local cur_pwd=$PWD
  local query=""
  if [[ -d $1 ]]; then cd $1; else query="$@"; fi
  f_file=$(fzf +m -q "$1" --delimiter / --nth -1 \
              --preview-window='right:hidden' \
              --preview 'bat --color=always --style=plain {}' \
              --inline-info --bind=ctrl-w:toggle-preview \
              --bind=ctrl-x:toggle-sort --exact $FCLR) \
  && f_dir=$(dirname "$f_file") && cd "$f_dir"
}

# fcd - cd into a directory
fcd() {
  local f_dir
  local cur_pwd=$PWD
  local dst_pwd="."
  local query=""
  if [[ -d $1 ]]
    then dst_pwd=$1
      if [[ "$#" -gt 1 ]]; then query="${@:2}"; fi
  else query="$@";
  fi
  f_dir=$(fd -uu --follow --exclude '/timeshift/*' --one-file-system -t d --full-path $dst_pwd | fzf +m -q "$query" \
        --preview 'tree -C {} | head -n $FZF_PREVIEW_LINES' \
        --preview-window='right:hidden:wrap' --inline-info --exact \
        --bind=ctrl-w:toggle-preview --bind=ctrl-x:toggle-sort $FCLR) \
  && cd "$f_dir";
  if [ $? -ne 0 ]; then cd $cur_pwd; fi
}

# fcp - cd into parent directory
fcp() {
  local dirs=()
  local parent_dir
  get_parent_dirs() {
    if [[ -d "$1" ]]; then dirs+=("$1"); else return; fi
    if [[ "$1" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo "$_dir"; done
    else
      get_parent_dirs "$(dirname "$1")"
    fi
  }
  parent_dir="$(
    get_parent_dirs "$(realpath "${1:-$PWD}")" \
      | fzf +m \
          --preview 'tree -C {} | head -n $FZF_PREVIEW_LINES' \
          --preview-window='right:hidden:wrap' \
          --bind=ctrl-w:toggle-preview \
          --bind=ctrl-x:toggle-sort \
  )" || return
  cd "$parent_dir" || return
}

# fkill - kill process
fkill() {
  local pid
  pid="$(
    ps -ef \
      | sed 1d \
      | fzf -e -m \
      | awk '{print $2}'
  )" || return
  kill -"${1:-9}" "$pid" &> /dev/null
}

#
# Aliases -------------------------------------------------------------------------------
#

# System(ish)
alias ...="cd ../.."
alias ..="cd .."
alias :q="exit"
alias ap="ansible-playbook"
alias apt="sudo apt"
alias bfg="java -jar $HOME/.local/bin/bfg.jar"
alias c,="cd - > /dev/null"
alias c="clear"
alias ca="bat --style plain"
alias dd="dd bs=4M status=progress oflag=sync"
alias dmesg="sudo dmesg -Hwx"
alias fd="fdfind --hidden --no-ignore --follow"
alias gpg="gpg2"
alias ip="ip --color=auto"
alias ipa="ip --color=auto -br addr"
alias psudo="sudo --preserve-env"
alias remount_nfs="sudo mount -a -t cifs"
alias rm="rm -I"
alias rt="reset"
alias s="sudo"
alias sc="systemctl"
alias symlinks="find . -maxdepth 1 -type l -ls | cut -c 75- | sort |
                ack --color-match='bold yellow' --passthru '\w+\Z' --color |
                ack --color-match='yellow' --passthru '^[a-zA-Z0-9\_\.\-]+' --color |
                ack --color-match='dark yellow' --passthru '\->\s'" # '"bad parser fix
alias atree="tree -pa"
alias sshkey="cat ~/.ssh/id_rsa.pub | xc && echo 'Copied to clipboard.'"
alias sup='su --preserve-environment'
alias sv="sudoedit"
alias watch="watch -c"
alias xc="wl-copy --trim-newline"

# NeoVim
alias v="nvim"
alias vi="nvim"
alias vim="nvim"
alias gvi="nvim-gtk"

# Git
alias g="git"
alias ga="git add"
alias gc="git commit"
alias gca='git commit -a'
alias gco='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gfig="git config --local -e"
alias gt='git -c color.status=always status --branch --short'
alias gu="gitui"
alias lg="git log --graph --abbrev-commit --decorate --format=format:'%C(blue)%h%C(reset) - %C(green)(%ar)%C(reset) %C(white)%s%C(reset)%C(reset)%C(bold cyan)%d%C(reset)' --all"

# Grc
alias ping='grc ping -4'
alias traceroute='grc traceroute'

# Local
alias backports_check="sudo apt full-upgrade -t buster-backports --assume-no"
alias backports_check_oneline='apt -t buster-backports -s upgrade 2> /dev/null | egrep ^Inst | cut -d " " -f 2-3'
alias cal='ncal -3 -M -b'
alias fonts_list='fc-list | cut -d":" -f2 | sort | uniq'
alias fonts_rebuild='fc-cache -fv && mkfontdir ~/.local/share/fonts && xset +fp ~/.local/share/fonts'
alias gtk3themes="find /usr/share/themes/ -name gtk-3.0 | cut -d'/' -f5"
alias gtk3icons="
find /usr/share/icons/ ~/.local/share/icons -maxdepth 1 -mindepth 1 -type d -printf '%f\n' 2> /dev/null
"
alias gtk3cursors="find /usr/share/icons ~/.local/share/icons ~/.icons -type d -name "cursors" 2> /dev/null"
alias mount_gocrypt=". <(gpg2 -dq $HOME/.local/bin/mount_gocrypt.sh.asc)"
alias mp3guess="mp3guessenc -v -r -f -i -s"
alias randomword="perl -e 'open IN, \"</usr/share/dict/words\";rand($.) < 1 && (\$n=\$_) while <IN>;print \$n'"
alias t='task'
alias weather="curl -s v2.wttr.in/Adelaide | head -42"
alias issues_dmesg="sudo dmesg | grep -E '[iI]nvalid|[eE]rror|[wW]arn|[fF]ail|[sS]egfault|Trace|INVALID|ERROR|WARN|FAIL|SEGFAULT'"
alias issues_systemd="sudo systemctl --failed"
alias issues_topology="lstopo-no-graphics"
alias debug_keycodes="sudo libinput debug-events --show-keycodes"
alias debug_summary="inxi -Fxxxz -G --display"
alias img2sixel="img2sixel -I"
alias vf="vicd"
alias cmus='tmux attach-session -t cmus || tmux new-session -A -D -s cmus "$(which cmus)"'
alias timezones='undertime'
alias mydnsip="dig +cdflag +dnssec +short myip.opendns.com @resolver1.opendns.com"
alias myip="curl -s https://www.zx2c4.com/ip | cut -b1-15 | head -n1 | grep -o -P '^\d+\.\d+\.\d+\.\d+' | xargs"
alias ncmpcpp="ncmpcpp --quiet"
alias cpu_gcc='gcc -v -E -x c /dev/null -o /dev/null -march=native 2>&1 | grep /cc1'

# Wireless
alias wifimon='wavemon -g'
alias wifilow='sudo iwconfig wlan0 txpower 18'
alias wifihigh='sudo iwconfig wlan0 txpower 20'
