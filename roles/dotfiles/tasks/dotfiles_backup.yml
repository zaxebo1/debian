---
- name: Find existing dotfiles
  become: True
  become_user: '{{ ansible_env.USER }}'
  find:
    path: '{{ ansible_env.HOME }}'
    file_type: file
    hidden: True
  register: homedir_files

- name: Sanitize found files
  set_fact:
    homedir_files_fpaths: '{{ homedir_files.files | map(attribute="path") | list | flatten }}'
    homedir_files_fnames: []
    fname: ""
  when: homedir_files | length > 0

- name: Extract file-names from the full path
  set_fact:
    fname: '{{ item | basename }}'
    homedir_files_fnames: '{{ homedir_files_fnames + [fname] }}'
  with_items:
    - "{{ homedir_files_fpaths }}"
  when: homedir_files_fpaths | length > 0

- name: Extract file-names of the new dotfiles we intend to copy
  set_fact:
    homedir_files_dotfiles: '{{ dotfiles_backup | map(attribute="dest") | list | flatten }}'
  when: homedir_files_fnames | length > 0

- name: Intersect found files with the list of dotfiles we are about to copy
  set_fact:
    homedir_files_cross: '{{ homedir_files_dotfiles | intersect(homedir_files_fnames) }}'
  when: homedir_files_dotfiles | length > 0

- name: Create a folder for existing dotfiles
  become: True
  become_user: '{{ ansible_env.USER }}'
  file:
      path: '{{ ansible_env.HOME }}/.dotfiles_backup'
      state: directory
  when: homedir_files_cross | length > 0
  register: dotfiles_backup_folder

- name: Backup existing dotfiles
  become: True
  become_user: '{{ ansible_env.USER }}'
  copy:
    src: '{{ ansible_env.HOME }}/{{ item }}'
    dest: '{{ ansible_env.HOME }}/.dotfiles_backup/{{ item }}_{{ ansible_date_time.epoch }}'
    remote_src: True
  with_items: '{{ homedir_files_cross }}'
  when: homedir_files_cross | length > 0
  register: dotfiles_backup_result

- name: Remove pre-existing dotfiles
  become: True
  become_user: '{{ ansible_env.USER }}'
  file:
    path: '{{ ansible_env.HOME }}/{{ item }}'
    state: absent
  with_items: '{{ homedir_files_cross }}'
  when: dotfiles_backup_result.msg == "All items completed"
  register: dotfiles_backup_removed
